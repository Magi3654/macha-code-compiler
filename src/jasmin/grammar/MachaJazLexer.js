// Generated from ./grammar/MachaJaz.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,30,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,81,8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,3,12,113,8,12,1,13,1,13,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,19,1,19,1,19,3,19,155,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
1,22,1,22,1,22,1,22,1,22,1,22,3,22,170,8,22,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,3,23,181,8,23,1,24,1,24,5,24,185,8,24,10,24,12,24,188,9,24,
1,24,1,24,1,25,1,25,3,25,194,8,25,1,25,1,25,1,26,4,26,199,8,26,11,26,12,
26,200,1,27,4,27,204,8,27,11,27,12,27,205,1,28,4,28,209,8,28,11,28,12,28,
210,1,29,4,29,214,8,29,11,29,12,29,215,1,29,1,29,1,186,0,30,1,1,3,2,5,3,
7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
29,59,30,1,0,6,2,0,60,60,62,62,3,0,32,32,65,90,97,122,3,0,45,46,48,57,94,
94,2,0,65,90,97,122,5,0,42,42,47,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
32,235,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,80,1,0,0,0,5,82,1,0,0,0,7,84,
1,0,0,0,9,86,1,0,0,0,11,88,1,0,0,0,13,90,1,0,0,0,15,92,1,0,0,0,17,94,1,0,
0,0,19,96,1,0,0,0,21,98,1,0,0,0,23,100,1,0,0,0,25,112,1,0,0,0,27,114,1,0,
0,0,29,116,1,0,0,0,31,123,1,0,0,0,33,129,1,0,0,0,35,137,1,0,0,0,37,143,1,
0,0,0,39,154,1,0,0,0,41,156,1,0,0,0,43,159,1,0,0,0,45,169,1,0,0,0,47,180,
1,0,0,0,49,182,1,0,0,0,51,191,1,0,0,0,53,198,1,0,0,0,55,203,1,0,0,0,57,208,
1,0,0,0,59,213,1,0,0,0,61,62,5,99,0,0,62,63,5,104,0,0,63,64,5,105,0,0,64,
65,5,99,0,0,65,66,5,104,0,0,66,67,5,97,0,0,67,68,5,107,0,0,68,2,1,0,0,0,
69,70,5,103,0,0,70,71,5,101,0,0,71,72,5,117,0,0,72,81,5,109,0,0,73,74,5,
104,0,0,74,75,5,97,0,0,75,76,5,110,0,0,76,81,5,97,0,0,77,78,5,115,0,0,78,
79,5,97,0,0,79,81,5,109,0,0,80,69,1,0,0,0,80,73,1,0,0,0,80,77,1,0,0,0,81,
4,1,0,0,0,82,83,5,40,0,0,83,6,1,0,0,0,84,85,5,41,0,0,85,8,1,0,0,0,86,87,
5,123,0,0,87,10,1,0,0,0,88,89,5,125,0,0,89,12,1,0,0,0,90,91,5,42,0,0,91,
14,1,0,0,0,92,93,5,47,0,0,93,16,1,0,0,0,94,95,5,43,0,0,95,18,1,0,0,0,96,
97,5,45,0,0,97,20,1,0,0,0,98,99,5,61,0,0,99,22,1,0,0,0,100,101,5,37,0,0,
101,24,1,0,0,0,102,103,5,43,0,0,103,113,5,61,0,0,104,105,5,45,0,0,105,113,
5,61,0,0,106,107,5,42,0,0,107,113,5,61,0,0,108,109,5,47,0,0,109,113,5,61,
0,0,110,111,5,37,0,0,111,113,5,61,0,0,112,102,1,0,0,0,112,104,1,0,0,0,112,
106,1,0,0,0,112,108,1,0,0,0,112,110,1,0,0,0,113,26,1,0,0,0,114,115,5,44,
0,0,115,28,1,0,0,0,116,117,5,105,0,0,117,118,5,110,0,0,118,119,5,115,0,0,
119,120,5,119,0,0,120,121,5,97,0,0,121,122,5,101,0,0,122,30,1,0,0,0,123,
124,5,109,0,0,124,125,5,121,0,0,125,126,5,101,0,0,126,127,5,111,0,0,127,
128,5,110,0,0,128,32,1,0,0,0,129,130,5,110,0,0,130,131,5,97,0,0,131,132,
5,109,0,0,132,133,5,111,0,0,133,134,5,99,0,0,134,135,5,104,0,0,135,136,5,
105,0,0,136,34,1,0,0,0,137,138,5,119,0,0,138,139,5,105,0,0,139,140,5,104,
0,0,140,141,5,97,0,0,141,142,5,110,0,0,142,36,1,0,0,0,143,144,5,103,0,0,
144,145,5,101,0,0,145,146,5,117,0,0,146,147,5,116,0,0,147,148,5,116,0,0,
148,149,5,97,0,0,149,150,5,101,0,0,150,38,1,0,0,0,151,152,5,61,0,0,152,155,
5,61,0,0,153,155,5,37,0,0,154,151,1,0,0,0,154,153,1,0,0,0,155,40,1,0,0,0,
156,157,5,38,0,0,157,158,5,38,0,0,158,42,1,0,0,0,159,160,5,124,0,0,160,161,
5,124,0,0,161,44,1,0,0,0,162,170,7,0,0,0,163,164,5,60,0,0,164,170,5,61,0,
0,165,166,5,62,0,0,166,170,5,61,0,0,167,168,5,33,0,0,168,170,5,61,0,0,169,
162,1,0,0,0,169,163,1,0,0,0,169,165,1,0,0,0,169,167,1,0,0,0,170,46,1,0,0,
0,171,172,5,116,0,0,172,173,5,114,0,0,173,174,5,117,0,0,174,181,5,101,0,
0,175,176,5,102,0,0,176,177,5,97,0,0,177,178,5,108,0,0,178,179,5,115,0,0,
179,181,5,101,0,0,180,171,1,0,0,0,180,175,1,0,0,0,181,48,1,0,0,0,182,186,
5,34,0,0,183,185,9,0,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,187,1,0,0,0,
186,184,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,5,34,0,0,190,50,
1,0,0,0,191,193,5,34,0,0,192,194,7,1,0,0,193,192,1,0,0,0,193,194,1,0,0,0,
194,195,1,0,0,0,195,196,5,34,0,0,196,52,1,0,0,0,197,199,7,2,0,0,198,197,
1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,54,1,0,0,0,202,
204,7,3,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,
0,0,206,56,1,0,0,0,207,209,7,4,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,208,
1,0,0,0,210,211,1,0,0,0,211,58,1,0,0,0,212,214,7,5,0,0,213,212,1,0,0,0,214,
215,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,6,29,
0,0,218,60,1,0,0,0,12,0,80,112,154,169,180,186,193,200,205,210,215,1,6,0,
0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class MachaJazLexer extends antlr4.Lexer {

    static grammarFileName = "MachaJaz.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'chichak'", null, "'('", "')'", "'{'", "'}'", 
                         "'*'", "'/'", "'+'", "'-'", "'='", "'%'", null, 
                         "','", "'inswae'", "'myeon'", "'namochi'", "'wihan'", 
                         "'geuttae'", null, "'&&'", "'||'" ];
	static symbolicNames = [ null, "CHICHAK", "PR", "PARENTH_A", "PARENTH_B", 
                          "OPENKEY", "CLOSEKEY", "GOPSSEM", "NANU", "DO", 
                          "PPAEDA", "EQUALS", "PORCENT", "SUMARIZER", "COMA", 
                          "PRINT", "IF", "ELSE", "FOR", "WHILE", "LOGIC", 
                          "AND", "OR", "MATH", "BOOLEAN", "STRING", "CHAR", 
                          "SUJJA", "GEULSSI", "CHINCHA", "GONG" ];
	static ruleNames = [ "CHICHAK", "PR", "PARENTH_A", "PARENTH_B", "OPENKEY", 
                      "CLOSEKEY", "GOPSSEM", "NANU", "DO", "PPAEDA", "EQUALS", 
                      "PORCENT", "SUMARIZER", "COMA", "PRINT", "IF", "ELSE", 
                      "FOR", "WHILE", "LOGIC", "AND", "OR", "MATH", "BOOLEAN", 
                      "STRING", "CHAR", "SUJJA", "GEULSSI", "CHINCHA", "GONG" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

MachaJazLexer.EOF = antlr4.Token.EOF;
MachaJazLexer.CHICHAK = 1;
MachaJazLexer.PR = 2;
MachaJazLexer.PARENTH_A = 3;
MachaJazLexer.PARENTH_B = 4;
MachaJazLexer.OPENKEY = 5;
MachaJazLexer.CLOSEKEY = 6;
MachaJazLexer.GOPSSEM = 7;
MachaJazLexer.NANU = 8;
MachaJazLexer.DO = 9;
MachaJazLexer.PPAEDA = 10;
MachaJazLexer.EQUALS = 11;
MachaJazLexer.PORCENT = 12;
MachaJazLexer.SUMARIZER = 13;
MachaJazLexer.COMA = 14;
MachaJazLexer.PRINT = 15;
MachaJazLexer.IF = 16;
MachaJazLexer.ELSE = 17;
MachaJazLexer.FOR = 18;
MachaJazLexer.WHILE = 19;
MachaJazLexer.LOGIC = 20;
MachaJazLexer.AND = 21;
MachaJazLexer.OR = 22;
MachaJazLexer.MATH = 23;
MachaJazLexer.BOOLEAN = 24;
MachaJazLexer.STRING = 25;
MachaJazLexer.CHAR = 26;
MachaJazLexer.SUJJA = 27;
MachaJazLexer.GEULSSI = 28;
MachaJazLexer.CHINCHA = 29;
MachaJazLexer.GONG = 30;



