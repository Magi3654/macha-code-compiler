// Generated from ./grammar/translate/MachaC.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,30,224,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
1,0,3,0,74,8,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,3,6,96,8,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,
16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,3,18,137,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,148,
8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,157,8,20,1,21,1,21,1,21,1,21,
1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
23,1,23,1,23,1,24,4,24,181,8,24,11,24,12,24,182,1,25,4,25,186,8,25,11,25,
12,25,187,1,25,1,25,4,25,192,8,25,11,25,12,25,193,1,26,1,26,5,26,198,8,26,
10,26,12,26,201,9,26,1,26,1,26,1,27,1,27,4,27,207,8,27,11,27,12,27,208,3,
27,211,8,27,1,28,4,28,214,8,28,11,28,12,28,215,1,29,4,29,219,8,29,11,29,
12,29,220,1,29,1,29,1,199,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,7,2,0,60,60,62,62,
2,0,65,90,97,122,1,0,48,57,1,0,46,46,4,0,48,57,65,90,95,95,97,122,3,0,48,
57,65,90,97,122,3,0,9,10,13,13,32,32,244,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,73,1,0,
0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,0,0,0,13,
95,1,0,0,0,15,97,1,0,0,0,17,99,1,0,0,0,19,101,1,0,0,0,21,103,1,0,0,0,23,
105,1,0,0,0,25,107,1,0,0,0,27,109,1,0,0,0,29,111,1,0,0,0,31,114,1,0,0,0,
33,119,1,0,0,0,35,123,1,0,0,0,37,136,1,0,0,0,39,147,1,0,0,0,41,156,1,0,0,
0,43,158,1,0,0,0,45,165,1,0,0,0,47,175,1,0,0,0,49,180,1,0,0,0,51,185,1,0,
0,0,53,195,1,0,0,0,55,204,1,0,0,0,57,213,1,0,0,0,59,218,1,0,0,0,61,62,5,
105,0,0,62,63,5,110,0,0,63,74,5,116,0,0,64,65,5,102,0,0,65,66,5,108,0,0,
66,67,5,111,0,0,67,68,5,97,0,0,68,74,5,116,0,0,69,70,5,99,0,0,70,71,5,104,
0,0,71,72,5,97,0,0,72,74,5,114,0,0,73,61,1,0,0,0,73,64,1,0,0,0,73,69,1,0,
0,0,74,2,1,0,0,0,75,76,5,40,0,0,76,4,1,0,0,0,77,78,5,41,0,0,78,6,1,0,0,0,
79,80,5,123,0,0,80,8,1,0,0,0,81,82,5,125,0,0,82,10,1,0,0,0,83,84,5,61,0,
0,84,12,1,0,0,0,85,86,5,43,0,0,86,96,5,61,0,0,87,88,5,45,0,0,88,96,5,61,
0,0,89,90,5,42,0,0,90,96,5,61,0,0,91,92,5,47,0,0,92,96,5,61,0,0,93,94,5,
37,0,0,94,96,5,61,0,0,95,85,1,0,0,0,95,87,1,0,0,0,95,89,1,0,0,0,95,91,1,
0,0,0,95,93,1,0,0,0,96,14,1,0,0,0,97,98,5,42,0,0,98,16,1,0,0,0,99,100,5,
47,0,0,100,18,1,0,0,0,101,102,5,43,0,0,102,20,1,0,0,0,103,104,5,45,0,0,104,
22,1,0,0,0,105,106,5,34,0,0,106,24,1,0,0,0,107,108,5,59,0,0,108,26,1,0,0,
0,109,110,5,37,0,0,110,28,1,0,0,0,111,112,5,105,0,0,112,113,5,102,0,0,113,
30,1,0,0,0,114,115,5,101,0,0,115,116,5,108,0,0,116,117,5,115,0,0,117,118,
5,101,0,0,118,32,1,0,0,0,119,120,5,102,0,0,120,121,5,111,0,0,121,122,5,114,
0,0,122,34,1,0,0,0,123,124,5,119,0,0,124,125,5,104,0,0,125,126,5,105,0,0,
126,127,5,108,0,0,127,128,5,101,0,0,128,36,1,0,0,0,129,130,5,124,0,0,130,
137,5,124,0,0,131,132,5,38,0,0,132,137,5,38,0,0,133,134,5,61,0,0,134,137,
5,61,0,0,135,137,5,37,0,0,136,129,1,0,0,0,136,131,1,0,0,0,136,133,1,0,0,
0,136,135,1,0,0,0,137,38,1,0,0,0,138,139,5,116,0,0,139,140,5,114,0,0,140,
141,5,117,0,0,141,148,5,101,0,0,142,143,5,102,0,0,143,144,5,97,0,0,144,145,
5,108,0,0,145,146,5,115,0,0,146,148,5,101,0,0,147,138,1,0,0,0,147,142,1,
0,0,0,148,40,1,0,0,0,149,157,7,0,0,0,150,151,5,60,0,0,151,157,5,61,0,0,152,
153,5,62,0,0,153,157,5,61,0,0,154,155,5,33,0,0,155,157,5,61,0,0,156,149,
1,0,0,0,156,150,1,0,0,0,156,152,1,0,0,0,156,154,1,0,0,0,157,42,1,0,0,0,158,
159,5,112,0,0,159,160,5,114,0,0,160,161,5,105,0,0,161,162,5,110,0,0,162,
163,5,116,0,0,163,164,5,102,0,0,164,44,1,0,0,0,165,166,5,118,0,0,166,167,
5,111,0,0,167,168,5,105,0,0,168,169,5,100,0,0,169,170,5,32,0,0,170,171,5,
109,0,0,171,172,5,97,0,0,172,173,5,105,0,0,173,174,5,110,0,0,174,46,1,0,
0,0,175,176,5,34,0,0,176,177,7,1,0,0,177,178,5,34,0,0,178,48,1,0,0,0,179,
181,7,2,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,
0,0,183,50,1,0,0,0,184,186,7,2,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,
1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,191,7,3,0,0,190,192,7,2,0,0,
191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,52,1,
0,0,0,195,199,5,34,0,0,196,198,9,0,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,
200,1,0,0,0,199,197,1,0,0,0,200,202,1,0,0,0,201,199,1,0,0,0,202,203,5,34,
0,0,203,54,1,0,0,0,204,210,7,1,0,0,205,207,7,4,0,0,206,205,1,0,0,0,207,208,
1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,206,1,0,0,0,
210,211,1,0,0,0,211,56,1,0,0,0,212,214,7,5,0,0,213,212,1,0,0,0,214,215,1,
0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,58,1,0,0,0,217,219,7,6,0,0,218,
217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,222,1,0,
0,0,222,223,6,29,0,0,223,60,1,0,0,0,14,0,73,95,136,147,156,182,187,193,199,
208,210,215,220,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class MachaCLexer extends antlr4.Lexer {

    static grammarFileName = "MachaC.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, "'('", "')'", "'{'", "'}'", "'='", 
                         null, "'*'", "'/'", "'+'", "'-'", "'\"'", "';'", 
                         "'%'", "'if'", "'else'", "'for'", "'while'", null, 
                         null, null, "'printf'", "'void main'" ];
	static symbolicNames = [ null, "PR", "PARENTH_A", "PARENTH_B", "OPENKEY", 
                          "CLOSEKEY", "EQUALS", "SUMARIZER", "MULTI", "DIV", 
                          "SUM", "MIN", "DOUBLE_QUOTE", "SEMICOLON", "PORCENT", 
                          "IF", "ELSE", "FOR", "WHILE", "LOGIC", "BOOLEAN", 
                          "MATH", "PRINT", "MAIN", "CHAR", "INT", "FLOAT", 
                          "STRING", "ID", "INVID", "WS" ];
	static ruleNames = [ "PR", "PARENTH_A", "PARENTH_B", "OPENKEY", "CLOSEKEY", 
                      "EQUALS", "SUMARIZER", "MULTI", "DIV", "SUM", "MIN", 
                      "DOUBLE_QUOTE", "SEMICOLON", "PORCENT", "IF", "ELSE", 
                      "FOR", "WHILE", "LOGIC", "BOOLEAN", "MATH", "PRINT", 
                      "MAIN", "CHAR", "INT", "FLOAT", "STRING", "ID", "INVID", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

MachaCLexer.EOF = antlr4.Token.EOF;
MachaCLexer.PR = 1;
MachaCLexer.PARENTH_A = 2;
MachaCLexer.PARENTH_B = 3;
MachaCLexer.OPENKEY = 4;
MachaCLexer.CLOSEKEY = 5;
MachaCLexer.EQUALS = 6;
MachaCLexer.SUMARIZER = 7;
MachaCLexer.MULTI = 8;
MachaCLexer.DIV = 9;
MachaCLexer.SUM = 10;
MachaCLexer.MIN = 11;
MachaCLexer.DOUBLE_QUOTE = 12;
MachaCLexer.SEMICOLON = 13;
MachaCLexer.PORCENT = 14;
MachaCLexer.IF = 15;
MachaCLexer.ELSE = 16;
MachaCLexer.FOR = 17;
MachaCLexer.WHILE = 18;
MachaCLexer.LOGIC = 19;
MachaCLexer.BOOLEAN = 20;
MachaCLexer.MATH = 21;
MachaCLexer.PRINT = 22;
MachaCLexer.MAIN = 23;
MachaCLexer.CHAR = 24;
MachaCLexer.INT = 25;
MachaCLexer.FLOAT = 26;
MachaCLexer.STRING = 27;
MachaCLexer.ID = 28;
MachaCLexer.INVID = 29;
MachaCLexer.WS = 30;



