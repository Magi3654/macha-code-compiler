// Generated from ./grammar/Compilador.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,24,180,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,69,8,1,1,2,1,2,1,3,1,3,1,
4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,
11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
15,1,15,1,15,3,15,124,8,15,1,16,1,16,1,16,1,16,1,16,3,16,131,8,16,1,17,1,
17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,142,8,17,1,18,1,18,5,18,146,8,
18,10,18,12,18,149,9,18,1,18,1,18,1,19,1,19,3,19,155,8,19,1,19,1,19,1,20,
4,20,160,8,20,11,20,12,20,161,1,21,4,21,165,8,21,11,21,12,21,166,1,22,4,
22,170,8,22,11,22,12,22,171,1,23,4,23,175,8,23,11,23,12,23,176,1,23,1,23,
1,147,0,24,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,1,0,
6,2,0,60,60,62,62,3,0,32,32,65,90,97,122,1,0,48,57,2,0,65,90,97,122,6,0,
42,43,45,45,47,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,192,0,1,1,0,0,
0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
0,0,0,1,49,1,0,0,0,3,68,1,0,0,0,5,70,1,0,0,0,7,72,1,0,0,0,9,74,1,0,0,0,11,
76,1,0,0,0,13,78,1,0,0,0,15,80,1,0,0,0,17,82,1,0,0,0,19,84,1,0,0,0,21,86,
1,0,0,0,23,88,1,0,0,0,25,95,1,0,0,0,27,101,1,0,0,0,29,109,1,0,0,0,31,123,
1,0,0,0,33,130,1,0,0,0,35,141,1,0,0,0,37,143,1,0,0,0,39,152,1,0,0,0,41,159,
1,0,0,0,43,164,1,0,0,0,45,169,1,0,0,0,47,174,1,0,0,0,49,50,5,99,0,0,50,51,
5,104,0,0,51,52,5,105,0,0,52,53,5,99,0,0,53,54,5,104,0,0,54,55,5,97,0,0,
55,56,5,107,0,0,56,2,1,0,0,0,57,58,5,103,0,0,58,59,5,101,0,0,59,60,5,117,
0,0,60,69,5,109,0,0,61,62,5,104,0,0,62,63,5,97,0,0,63,64,5,110,0,0,64,69,
5,97,0,0,65,66,5,115,0,0,66,67,5,97,0,0,67,69,5,109,0,0,68,57,1,0,0,0,68,
61,1,0,0,0,68,65,1,0,0,0,69,4,1,0,0,0,70,71,5,40,0,0,71,6,1,0,0,0,72,73,
5,41,0,0,73,8,1,0,0,0,74,75,5,123,0,0,75,10,1,0,0,0,76,77,5,125,0,0,77,12,
1,0,0,0,78,79,5,42,0,0,79,14,1,0,0,0,80,81,5,47,0,0,81,16,1,0,0,0,82,83,
5,43,0,0,83,18,1,0,0,0,84,85,5,45,0,0,85,20,1,0,0,0,86,87,5,61,0,0,87,22,
1,0,0,0,88,89,5,105,0,0,89,90,5,110,0,0,90,91,5,115,0,0,91,92,5,119,0,0,
92,93,5,97,0,0,93,94,5,101,0,0,94,24,1,0,0,0,95,96,5,109,0,0,96,97,5,121,
0,0,97,98,5,101,0,0,98,99,5,111,0,0,99,100,5,110,0,0,100,26,1,0,0,0,101,
102,5,110,0,0,102,103,5,97,0,0,103,104,5,109,0,0,104,105,5,111,0,0,105,106,
5,99,0,0,106,107,5,104,0,0,107,108,5,105,0,0,108,28,1,0,0,0,109,110,5,103,
0,0,110,111,5,101,0,0,111,112,5,117,0,0,112,113,5,116,0,0,113,114,5,116,
0,0,114,115,5,97,0,0,115,116,5,101,0,0,116,30,1,0,0,0,117,118,5,124,0,0,
118,124,5,124,0,0,119,120,5,38,0,0,120,124,5,38,0,0,121,122,5,61,0,0,122,
124,5,61,0,0,123,117,1,0,0,0,123,119,1,0,0,0,123,121,1,0,0,0,124,32,1,0,
0,0,125,131,7,0,0,0,126,127,5,60,0,0,127,131,5,61,0,0,128,129,5,62,0,0,129,
131,5,61,0,0,130,125,1,0,0,0,130,126,1,0,0,0,130,128,1,0,0,0,131,34,1,0,
0,0,132,133,5,116,0,0,133,134,5,114,0,0,134,135,5,117,0,0,135,142,5,101,
0,0,136,137,5,102,0,0,137,138,5,97,0,0,138,139,5,108,0,0,139,140,5,115,0,
0,140,142,5,101,0,0,141,132,1,0,0,0,141,136,1,0,0,0,142,36,1,0,0,0,143,147,
5,34,0,0,144,146,9,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,148,1,0,0,0,
147,145,1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,5,34,0,0,151,38,
1,0,0,0,152,154,5,34,0,0,153,155,7,1,0,0,154,153,1,0,0,0,154,155,1,0,0,0,
155,156,1,0,0,0,156,157,5,34,0,0,157,40,1,0,0,0,158,160,7,2,0,0,159,158,
1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,42,1,0,0,0,163,
165,7,3,0,0,164,163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,
0,0,167,44,1,0,0,0,168,170,7,4,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,
1,0,0,0,171,172,1,0,0,0,172,46,1,0,0,0,173,175,7,5,0,0,174,173,1,0,0,0,175,
176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,6,23,
0,0,179,48,1,0,0,0,11,0,68,123,130,141,147,154,161,166,171,176,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompiladorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilador.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'chichak'", null, "'('", "')'", "'{'", "'}'", 
                         "'*'", "'/'", "'+'", "'-'", "'='", "'inswae'", 
                         "'myeon'", "'namochi'", "'geuttae'" ];
	static symbolicNames = [ null, "CHICHAK", "PR", "PARENTH_A", "PARENTH_B", 
                          "OPENKEY", "CLOSEKEY", "GOPSSEM", "NANU", "DO", 
                          "PPAEDA", "EQUALS", "PRINT", "IF", "ELSE", "WHILE", 
                          "LOGIC", "MATH", "BOOLEAN", "STRING", "CHAR", 
                          "SUJJA", "GEULSSI", "CHINCHA", "GONG" ];
	static ruleNames = [ "CHICHAK", "PR", "PARENTH_A", "PARENTH_B", "OPENKEY", 
                      "CLOSEKEY", "GOPSSEM", "NANU", "DO", "PPAEDA", "EQUALS", 
                      "PRINT", "IF", "ELSE", "WHILE", "LOGIC", "MATH", "BOOLEAN", 
                      "STRING", "CHAR", "SUJJA", "GEULSSI", "CHINCHA", "GONG" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompiladorLexer.EOF = antlr4.Token.EOF;
CompiladorLexer.CHICHAK = 1;
CompiladorLexer.PR = 2;
CompiladorLexer.PARENTH_A = 3;
CompiladorLexer.PARENTH_B = 4;
CompiladorLexer.OPENKEY = 5;
CompiladorLexer.CLOSEKEY = 6;
CompiladorLexer.GOPSSEM = 7;
CompiladorLexer.NANU = 8;
CompiladorLexer.DO = 9;
CompiladorLexer.PPAEDA = 10;
CompiladorLexer.EQUALS = 11;
CompiladorLexer.PRINT = 12;
CompiladorLexer.IF = 13;
CompiladorLexer.ELSE = 14;
CompiladorLexer.WHILE = 15;
CompiladorLexer.LOGIC = 16;
CompiladorLexer.MATH = 17;
CompiladorLexer.BOOLEAN = 18;
CompiladorLexer.STRING = 19;
CompiladorLexer.CHAR = 20;
CompiladorLexer.SUJJA = 21;
CompiladorLexer.GEULSSI = 22;
CompiladorLexer.CHINCHA = 23;
CompiladorLexer.GONG = 24;



