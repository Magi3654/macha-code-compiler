// Generated from ./grammar/Compilador.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,28,213,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,3,1,77,8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,3,12,109,8,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,3,19,155,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
3,20,164,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,175,8,21,
1,22,1,22,5,22,179,8,22,10,22,12,22,182,9,22,1,22,1,22,1,23,1,23,3,23,188,
8,23,1,23,1,23,1,24,4,24,193,8,24,11,24,12,24,194,1,25,4,25,198,8,25,11,
25,12,25,199,1,26,4,26,203,8,26,11,26,12,26,204,1,27,4,27,208,8,27,11,27,
12,27,209,1,27,1,27,1,180,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
22,45,23,47,24,49,25,51,26,53,27,55,28,1,0,6,2,0,60,60,62,62,3,0,32,32,65,
90,97,122,3,0,45,46,48,57,94,94,2,0,65,90,97,122,5,0,42,42,47,57,65,90,95,
95,97,122,3,0,9,10,13,13,32,32,231,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,76,1,0,0,0,5,78,1,0,0,0,7,
80,1,0,0,0,9,82,1,0,0,0,11,84,1,0,0,0,13,86,1,0,0,0,15,88,1,0,0,0,17,90,
1,0,0,0,19,92,1,0,0,0,21,94,1,0,0,0,23,96,1,0,0,0,25,108,1,0,0,0,27,110,
1,0,0,0,29,112,1,0,0,0,31,119,1,0,0,0,33,125,1,0,0,0,35,133,1,0,0,0,37,139,
1,0,0,0,39,154,1,0,0,0,41,163,1,0,0,0,43,174,1,0,0,0,45,176,1,0,0,0,47,185,
1,0,0,0,49,192,1,0,0,0,51,197,1,0,0,0,53,202,1,0,0,0,55,207,1,0,0,0,57,58,
5,99,0,0,58,59,5,104,0,0,59,60,5,105,0,0,60,61,5,99,0,0,61,62,5,104,0,0,
62,63,5,97,0,0,63,64,5,107,0,0,64,2,1,0,0,0,65,66,5,103,0,0,66,67,5,101,
0,0,67,68,5,117,0,0,68,77,5,109,0,0,69,70,5,104,0,0,70,71,5,97,0,0,71,72,
5,110,0,0,72,77,5,97,0,0,73,74,5,115,0,0,74,75,5,97,0,0,75,77,5,109,0,0,
76,65,1,0,0,0,76,69,1,0,0,0,76,73,1,0,0,0,77,4,1,0,0,0,78,79,5,40,0,0,79,
6,1,0,0,0,80,81,5,41,0,0,81,8,1,0,0,0,82,83,5,123,0,0,83,10,1,0,0,0,84,85,
5,125,0,0,85,12,1,0,0,0,86,87,5,42,0,0,87,14,1,0,0,0,88,89,5,47,0,0,89,16,
1,0,0,0,90,91,5,43,0,0,91,18,1,0,0,0,92,93,5,45,0,0,93,20,1,0,0,0,94,95,
5,61,0,0,95,22,1,0,0,0,96,97,5,37,0,0,97,24,1,0,0,0,98,99,5,43,0,0,99,109,
5,61,0,0,100,101,5,45,0,0,101,109,5,61,0,0,102,103,5,42,0,0,103,109,5,61,
0,0,104,105,5,47,0,0,105,109,5,61,0,0,106,107,5,37,0,0,107,109,5,61,0,0,
108,98,1,0,0,0,108,100,1,0,0,0,108,102,1,0,0,0,108,104,1,0,0,0,108,106,1,
0,0,0,109,26,1,0,0,0,110,111,5,44,0,0,111,28,1,0,0,0,112,113,5,105,0,0,113,
114,5,110,0,0,114,115,5,115,0,0,115,116,5,119,0,0,116,117,5,97,0,0,117,118,
5,101,0,0,118,30,1,0,0,0,119,120,5,109,0,0,120,121,5,121,0,0,121,122,5,101,
0,0,122,123,5,111,0,0,123,124,5,110,0,0,124,32,1,0,0,0,125,126,5,110,0,0,
126,127,5,97,0,0,127,128,5,109,0,0,128,129,5,111,0,0,129,130,5,99,0,0,130,
131,5,104,0,0,131,132,5,105,0,0,132,34,1,0,0,0,133,134,5,119,0,0,134,135,
5,105,0,0,135,136,5,104,0,0,136,137,5,97,0,0,137,138,5,110,0,0,138,36,1,
0,0,0,139,140,5,103,0,0,140,141,5,101,0,0,141,142,5,117,0,0,142,143,5,116,
0,0,143,144,5,116,0,0,144,145,5,97,0,0,145,146,5,101,0,0,146,38,1,0,0,0,
147,148,5,124,0,0,148,155,5,124,0,0,149,150,5,38,0,0,150,155,5,38,0,0,151,
152,5,61,0,0,152,155,5,61,0,0,153,155,5,37,0,0,154,147,1,0,0,0,154,149,1,
0,0,0,154,151,1,0,0,0,154,153,1,0,0,0,155,40,1,0,0,0,156,164,7,0,0,0,157,
158,5,60,0,0,158,164,5,61,0,0,159,160,5,62,0,0,160,164,5,61,0,0,161,162,
5,33,0,0,162,164,5,61,0,0,163,156,1,0,0,0,163,157,1,0,0,0,163,159,1,0,0,
0,163,161,1,0,0,0,164,42,1,0,0,0,165,166,5,116,0,0,166,167,5,114,0,0,167,
168,5,117,0,0,168,175,5,101,0,0,169,170,5,102,0,0,170,171,5,97,0,0,171,172,
5,108,0,0,172,173,5,115,0,0,173,175,5,101,0,0,174,165,1,0,0,0,174,169,1,
0,0,0,175,44,1,0,0,0,176,180,5,34,0,0,177,179,9,0,0,0,178,177,1,0,0,0,179,
182,1,0,0,0,180,181,1,0,0,0,180,178,1,0,0,0,181,183,1,0,0,0,182,180,1,0,
0,0,183,184,5,34,0,0,184,46,1,0,0,0,185,187,5,34,0,0,186,188,7,1,0,0,187,
186,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,190,5,34,0,0,190,48,1,0,
0,0,191,193,7,2,0,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,
195,1,0,0,0,195,50,1,0,0,0,196,198,7,3,0,0,197,196,1,0,0,0,198,199,1,0,0,
0,199,197,1,0,0,0,199,200,1,0,0,0,200,52,1,0,0,0,201,203,7,4,0,0,202,201,
1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,54,1,0,0,0,206,
208,7,5,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,
0,0,210,211,1,0,0,0,211,212,6,27,0,0,212,56,1,0,0,0,12,0,76,108,154,163,
174,180,187,194,199,204,209,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompiladorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilador.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'chichak'", null, "'('", "')'", "'{'", "'}'", 
                         "'*'", "'/'", "'+'", "'-'", "'='", "'%'", null, 
                         "','", "'inswae'", "'myeon'", "'namochi'", "'wihan'", 
                         "'geuttae'" ];
	static symbolicNames = [ null, "CHICHAK", "PR", "PARENTH_A", "PARENTH_B", 
                          "OPENKEY", "CLOSEKEY", "GOPSSEM", "NANU", "DO", 
                          "PPAEDA", "EQUALS", "PORCENT", "SUMARIZER", "COMA", 
                          "PRINT", "IF", "ELSE", "FOR", "WHILE", "LOGIC", 
                          "MATH", "BOOLEAN", "STRING", "CHAR", "SUJJA", 
                          "GEULSSI", "CHINCHA", "GONG" ];
	static ruleNames = [ "CHICHAK", "PR", "PARENTH_A", "PARENTH_B", "OPENKEY", 
                      "CLOSEKEY", "GOPSSEM", "NANU", "DO", "PPAEDA", "EQUALS", 
                      "PORCENT", "SUMARIZER", "COMA", "PRINT", "IF", "ELSE", 
                      "FOR", "WHILE", "LOGIC", "MATH", "BOOLEAN", "STRING", 
                      "CHAR", "SUJJA", "GEULSSI", "CHINCHA", "GONG" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompiladorLexer.EOF = antlr4.Token.EOF;
CompiladorLexer.CHICHAK = 1;
CompiladorLexer.PR = 2;
CompiladorLexer.PARENTH_A = 3;
CompiladorLexer.PARENTH_B = 4;
CompiladorLexer.OPENKEY = 5;
CompiladorLexer.CLOSEKEY = 6;
CompiladorLexer.GOPSSEM = 7;
CompiladorLexer.NANU = 8;
CompiladorLexer.DO = 9;
CompiladorLexer.PPAEDA = 10;
CompiladorLexer.EQUALS = 11;
CompiladorLexer.PORCENT = 12;
CompiladorLexer.SUMARIZER = 13;
CompiladorLexer.COMA = 14;
CompiladorLexer.PRINT = 15;
CompiladorLexer.IF = 16;
CompiladorLexer.ELSE = 17;
CompiladorLexer.FOR = 18;
CompiladorLexer.WHILE = 19;
CompiladorLexer.LOGIC = 20;
CompiladorLexer.MATH = 21;
CompiladorLexer.BOOLEAN = 22;
CompiladorLexer.STRING = 23;
CompiladorLexer.CHAR = 24;
CompiladorLexer.SUJJA = 25;
CompiladorLexer.GEULSSI = 26;
CompiladorLexer.CHINCHA = 27;
CompiladorLexer.GONG = 28;



